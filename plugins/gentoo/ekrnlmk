
local _me="$0"
local _ver
local _mod
local _rslt
local _nopause
local _noclean
local _noinst
local _subex

function _print_help() {
  print "\nCompiles & install 'raw' kernel (no initramfs creation), including kernel modules (@module-rebuild)"
  print "\nAvailable options:\n"
  print -P "  %B--no-clean%b    Do not run 'make clean' prior to kernel compilation"
  print -P "  %B--no-install%b  Do not install (only compile)"
  print -P "  %B--no-pause%b    Do not confirm continuation after every stage"
  print "                Note: Any stage error will still cause an abort."
  print ""
}

function _contq() {
  # Ask confirmation of continuation
  #
  # Syntax:
  #     _contq [NRETVAL]
  #
  # NRETVAL = return value if user does not confirm. Defaults to 255
  #
  local __c
  print -Pn "%B%F{yellow}"
  read -r -q "__c?Continue [yN]?"
  print -P "%f%b"
  if [[ $__c != "y" ]]; then
    return ${1:-255}
  fi
  return 0
}

function _stage() {
  # Performs a stage
  #
  # Syntax:
  #     _stage [title=TITLE] [pre=PRESTAGE] args ...
  #
  # TITLE    = custom title (if not set, uses the args)
  # PRESTAGE = a command / function to be executed successfully before the args are executed
  #
  local __args=()
  local __pre
  local __title
  local __rslt
  while [[ $1 ]]; do
    # The '/*=/' means substitute everything from start up to and including the equals '=' sign, with nothing
    # In other words, deleting from start up to and including the first equals sign.
    # This removes the need to count number of chars, which is kind of fragile.
    case "$1" in
      pre=*)
        __pre="${1/*=/}"
        ;;
      title=*)
        __title="${1/*=/}"
        ;;
      *)
        __args+=( "$1" )
        ;;
    esac
    shift
  done
  print -P "\n%B%F{cyan}###%f ${__title:=${__args[*]}} %F{green}${(l:50::=:)}%f%b\n"
  if [[ $__pre ]]; then
    $__pre
    __rslt=$?
    if [[ $__rslt != 0 ]]; then
      return $__rslt
    fi
  fi
  $_subex "${__args[@]}"
  __rslt=$?
  if [[ $__rslt != 0 ]]; then
    print -P "%B%F{red}ERROR:${__rslt}%f - ekrnlmk aborted!%b\n"
    return $__rslt
  fi
  print -P "\n%B%F{green}----------%f %F{cyan}${__title}%f finished on %D{%Y-%m-%d %H:%M}"
  if [[ -z $_nopause ]]; then
    if ! _contq; then
      print -P "%B%F{yellow}ekrnlmk aborted by user.%f%b\n"
      return 125  #ECANCELED
    fi
  fi
  return 0
}

function _check_boot_writable() {
  local __tmp="$($_subex mktemp -p /boot 2> /dev/null)"
  if [[ $? != 0 || -z $__tmp ]]; then
    print -P "%B%F{yellow}WARNING: /boot is not writable!%f"
    if ! _contq; then
      return 13  # EACCESS
    fi
    print -P "%b"
  else
    $_subex rm "$__tmp"
  fi
  return 0
}

function _cleanup() {
  local __rslt=$?
  unset _me _ver _mod _rslt _nopause _noclean _noinst _subex
  unfunction _print_help _contq _stage _check_boot_writable _cleanup
  popd -q
  trap - EXIT
  return $__rslt
}

trap _cleanup EXIT

# {{{ Parse CLI opions

pushd -q /usr/src/linux
print -P "%B%F{cyan}${_me}%f - automated kernel builder & installer%b"
while [[ $1 ]]; do
  case $1 in
    --help)
      _print_help
      return
      ;;
    --no-pause)
      _nopause=1
      ;;
    --no-clean)
      _noclean=1
      ;;
    --no-install)
      _noinst=1
      ;;
  esac
  shift
done

# }}}

# {{{ Check Prerequisites

if type subex > /dev/null; then
  _subex="subex"
elif type gsubex > /dev/null; then
  _subex="gsubex"
else
  print -P "%B%F{red}ERROR:%f need '%F{yellow}subex%f'/'%F{yellow}gsubex%f' function/alias to be defined!%b"
  return 3  # ESRCH
fi
if ! [[ -f .config ]]; then
  print -P "%B%F{red}ERROR:%f File '%F{yellow}.config%f' not found!%b"
  return 2  # ENOENT
fi

# }}}

# {{{ Compilation Stages

print ""
print -P "Current kernel  : %B$(uname -r)%b"
_ver="$(make kernelversion)"
_mod="$(awk -F"=" '$1 == "CONFIG_LOCALVERSION" { print substr($2, 2, length($2)-2); end; }' .config)"
print -P "About to compile: %B${_ver}${_mod}%b"
if ! _contq 125; then
  return $?
fi

if ! _stage make clean; then
  return $?
fi

if ! _stage make; then
  return $?
fi

# }}}

# {{{ Installation Stages

if [[ -z $_noinst ]]; then

  if ! _stage make modules_install; then
    return $?
  fi

  if ! _stage pre="_check_boot_writable" make install; then
    return $?
  fi

  if ! _stage title="grub-mkconfig" grub-mkconfig -o /boot/grub/grub.cfg; then
    return $?
  fi

  if ! _stage emmodreb; then
    return $?
  fi

fi

# }}}

print -P "\n%B%F{green}==========%f $_me Done %F{green}==========%f%b\n"


# vim: set ft=zsh foldmethod=marker:
